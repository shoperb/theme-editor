/* Helpers */

// coerce a list to be comma delimited or make a new, empty comma delimited list.
@function comma-list($list: ()) {
  @return join((), $list, comma);
}

// Returns `$property` with the given prefix if it is found in `$transitionable-prefixed-values`.
@function prefixed-for-transition($prefix, $property) {
  @if type-of($property) == list {
    $new-list: comma-list();
    @each $v in $property {
      $new-list: append($new-list, prefixed-for-transition($prefix, $v));
    }
    @return $new-list;
  } @else {
    @if index($transitionable-prefixed-values, $property) {
      @return #{$prefix}-#{$property};
    } @else {
      @return $property;
    }
  }
}

@function is-time($value) {
  @if type-of($value) == number {
    @return not not index(s ms, unit($value));
  } @else {
    @return false;
  }
}

/* Removes false values from a list */
@function compact($args...){
  $list: ();
  @each $arg in $args{
    @if type-of($arg) == list{
      $length: length($arg);
      $i: 1;
      @for $i from 1 through $length{
        @if nth($arg, $i){
          $list: append($list, nth($arg, $i));
        }
      }
    } @else{
      @if $arg{
        $list: append($list, $arg);
      }
    }
  }
  @return $list;
}

@function prefix($prefix, $args){
  $list: ();
  @each $arg in $args{
    @if type-of($arg) == list{
      $length: length($arg);
      $i: 1;
      @for $i from 1 through $length{
        @if nth($arg, $i){
          $list: append($list, unquote($prefix + nth($arg, $i)));
        }
      }
    } @else{
      @if $arg{
        $list: append($list, unquote($prefix + $arg));
      }
    }
  }
  @return comma-list($list);
}