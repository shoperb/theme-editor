#!/usr/bin/env ruby

require_relative "../lib/shoperb_theme_editor"

def apply_global_opts
  Shoperb::Theme::Editor::Configuration::OPTIONS.each do |option, msg|
    on option, msg
  end
end

def with_description base
  <<-eos
#{description}

#{base}
  eos
end

Slop.parse ignore_case: true, help: true, strict: true do

  apply_global_opts

  command "clone" do
    apply_global_opts
    on "skip-images", "Skip downloading images"
    on :"only-products=", "Add comma separated product ids to sync", as: String
    description "Downloads your shops shoperb theme"
    banner with_description("Usage: shoperb clone <directory> [<handle>] [options]")
    run do |options, args|
      Shoperb::Theme::Editor.with_configuration(options, *args) do
        Shoperb::Theme::Editor::Api.pull *args
        Shoperb::Theme::Editor::Api.sync args[0]
      end
    end
  end

  command "pull" do
    apply_global_opts
    description "Updates your local shoperb theme"
    banner with_description("Usage: shoperb pull [options]")
    run do |options, args|
      Shoperb::Theme::Editor.with_configuration(options) do
        Shoperb::Theme::Editor::Api.pull *args
      end
    end
  end

  command "pull:emails" do
    apply_global_opts
    description "Updates your local shoperb emails"
    banner with_description("Usage: shoperb pull:emails [options]")
    run do |options, args|
      Shoperb::Theme::Editor.with_configuration(options) do
        Shoperb::Theme::Editor::Api.pull_emails *args
      end
    end
  end

  command "push" do
    apply_global_opts
    description "Updates your remote shoperb theme"
    banner with_description("Usage: shoperb push [options]")
    on :r, :reset, 'Reset all (with settings data)'

    run do |options, args|
      Shoperb::Theme::Editor.with_configuration(options) do
        Shoperb::Theme::Editor::Api.push **options
      end
    end
  end

  command "push:emails" do
    apply_global_opts
    description "Updates your remote shoperb emails"
    banner with_description("Usage: shoperb push:emails [options]")
    on :r, :reset, 'Reset all (with settings data)'

    run do |options, args|
      Shoperb::Theme::Editor.with_configuration(options) do
        Shoperb::Theme::Editor::Api.push_emails **options
      end
    end
  end

  command "zip" do
    apply_global_opts
    description "Zips up your local shoperb theme"
    banner with_description("Usage: shoperb zip [options]")
    run do |options, args|
      Shoperb::Theme::Editor.with_configuration(options) do
        Shoperb::Theme::Editor::Api.zip
      end
    end
  end

  command "console" do
    apply_global_opts
    description "Irb in the context of theme generator"
    banner with_description("Usage: shoperb console [options]")
    run do |options, args|
      Shoperb::Theme::Editor.with_configuration(options) do
        Shoperb::Theme::Editor::Mounter::Model.console
      end
    end
  end

  mount = ->(*vars) {
    apply_global_opts
    description "Serves local as a shoperb theme file"
    banner with_description("Usage: shoperb mount [options]")
    run do |options, args|
      Shoperb::Theme::Editor.with_configuration(options) do
        Shoperb::Theme::Editor::Mounter.start
      end
    end
  }

  command "mount", &mount
  command "serve", &mount

  command "sync" do
    apply_global_opts
    on "skip-images", "Skip downloading images"
    on :"only-products=", "Add comma separated product ids to sync", as: String
    description "Syncronizes your shoperb shops products/categories/etc to your local data"
    banner with_description("Usage: shoperb sync [options]")
    run do |options, args|
      Shoperb::Theme::Editor.with_configuration(options) do
        Shoperb::Theme::Editor::Api.sync args[0], options.to_hash
      end
    end
  end

  command "init" do
    apply_global_opts
    description "Initializes a new theme"
    banner with_description("Usage: shoperb init <template> <handle> [options]")
    run do |options, args|
      Shoperb::Theme::Editor.with_configuration(options) do
        Shoperb::Theme::Editor::Init.new(args[0], args[1] || "default")
      end
    end
  end

end
