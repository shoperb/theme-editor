#!/usr/bin/env ruby
lib = File.expand_path("../../lib", __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require "slop"
require "shoperb/editor"

def apply_global_opts
  Shoperb::Configuration::OPTIONS.each do |option, msg|
    on option, msg
  end
end

def with_description base
  <<-eos
#{description}

#{base}
  eos
end

Slop.parse ignore_case: true, help: true, strict: true do

  apply_global_opts

  command "pull" do
    apply_global_opts
    description "Downloads your shops shoperb theme"
    banner with_description("Usage: shoperb pull <directory> [options]")
    run do |options, args|
      require "shoperb/oauth"
      Shoperb.with_configuration(options, *args) do
        Shoperb::OAuth.pull args.first
      end
    end
  end

  command "push" do
    apply_global_opts
    description "Uploads your local shoperb theme to your shop"
    banner with_description("Usage: shoperb push [options]")
    run do |options, args|
      require "shoperb/oauth"
      Shoperb.with_configuration(options, *args) do
        Shoperb::OAuth.push
      end
    end
  end

  command "mount" do
    apply_global_opts
    description "Serves local as a shoperb theme file"
    banner with_description("Usage: shoperb mount [options]")
    run do |options, args|
      require "shoperb/mounter"
      Shoperb.with_configuration(options, *args) do
        Shoperb::Mounter.start
      end
    end
  end

  command "init" do
    apply_global_opts
    description "Initiates a shoperb theme template"
    banner with_description <<-eos
Available styles are: #{Shoperb::Theme::AVAILABLE_TEMPLATES.join(", ")}
Usage: shoperb init <style> [options]
eos
    run do |options, args|
      Shoperb.with_configuration(options, *args) do
        Shoperb::Theme.init args.first
      end
    end
  end

  command "sync" do
    apply_global_opts
    description "(Not implemented) Syncronizes your shoperb shops products/categories/etc to your local data"
    banner with_description("Usage: shoperb sync [options]")
    run do |options, args|
      require "shoperb/oauth"
      Shoperb.with_configuration(options, *args) do
        Shoperb::OAuth.sync
      end
    end
  end

  command "clean" do
    apply_global_opts
    description "Removes configuration file"
    banner with_description("Usage: shoperb push [options]")
    run do |options, args|
      Shoperb::Configuration.destroy
    end
  end

end