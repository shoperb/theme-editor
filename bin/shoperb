#!/usr/bin/env ruby

require_relative "../lib/shoperb/editor"

def apply_global_opts
  Shoperb::Configuration::OPTIONS.each do |option, msg|
    on option, msg
  end
end

def with_description base
  <<-eos
#{description}

#{base}
  eos
end

Slop.parse ignore_case: true, help: true, strict: true do

  apply_global_opts

  command "clone" do
    apply_global_opts
    description "Downloads your shops shoperb theme"
    banner with_description("Usage: shoperb clone <directory> [<handle>] [options]")
    run do |options, args|
      Shoperb.with_configuration(options, *args) do
        Shoperb::OAuth.clone_remote
      end
    end
  end

  command "pull" do
    apply_global_opts
    description "Updates your local shoperb theme"
    banner with_description("Usage: shoperb pull [options]")
    run do |options, args|
      Shoperb.with_configuration(options) do
        Shoperb::OAuth.pull
      end
    end
  end

  command "push" do
    apply_global_opts
    description "Updates your remote shoperb theme"
    banner with_description("Usage: shoperb push [options]")
    run do |options, args|
      Shoperb.with_configuration(options) do
        Shoperb::OAuth.push
      end
    end
  end

  command "console" do
    apply_global_opts
    description "Irb in the context of theme generator"
    banner with_description("Usage: shoperb console [options]")
    run do |options, args|
      Shoperb.with_configuration(options) do
        Shoperb::Mounter::Model.console
      end
    end
  end

  mount = ->(*vars) {
    apply_global_opts
    description "Serves local as a shoperb theme file"
    banner with_description("Usage: shoperb mount [options]")
    run do |options, args|
      Shoperb.with_configuration(options) do
        Shoperb::Mounter.start
      end
    end
  }

  command "mount", &mount
  command "serve", &mount

  command "dummy_data" do
    apply_global_opts
    description "Clones default dummy data to the theme (also done on pull and init). Won't overwrite already excisting data files."
    banner with_description("Usage: shoperb clone_dummy_data [options]")
    run do |options, args|
      Shoperb.with_configuration(options) do
        Shoperb::Theme.clone_models
      end
    end
  end

  command "init" do
    apply_global_opts
    description "Initiates a shoperb theme template"
    banner with_description <<-eos
Available styles are: #{Shoperb::Theme::AVAILABLE_TEMPLATES.join(", ")}
Usage: shoperb init <style> [options]
eos
    run do |options, args|
      Shoperb.with_configuration(options) do
        Shoperb::Theme.init args.first
      end
    end
  end

  command "sync" do
    apply_global_opts
    description "Syncronizes your shoperb shops products/categories/etc to your local data"
    banner with_description("Usage: shoperb sync [options]")
    run do |options, args|
      Shoperb.with_configuration(options) do
        Shoperb::OAuth.sync
      end
    end
  end

end